# Подключаем класс Post и его детей: Memo, Link, Task
require_relative 'lib/post'
require_relative 'lib/memo'
require_relative 'lib/link'
require_relative 'lib/task'

# Поздороваемся с пользователем и просим у него, что он хочет создать.

puts 'Привет, я твой блокнот! Версия с SQlite'
puts
puts 'Что хотите записать в блокнот?'

# Запишем в переменную choices массив типов записей, которые можно создать,
# вызвав у класса Post метод post_types (статический метод).
choices = Post.post_types.keys

# Для начала цикла запишем в переменную choice (куда позже будем складывать
# выбор пользователя) значение -1.
choice = -1

# Пока юзер не выбрал правильно (от 0 до длины массива вариантов), спрашиваем
# у него число и выводим список возможных вариантов для записи.
until choice >= 0 && choice < choices.size + 1
  choices.each_with_index do |type, index|
    puts "\t#{index}. #{type}"
  end
    puts 'Для выхода нажмите 3'
  # Запишем выбор пользователя в переменную choice
  choice = gets.to_i
end

if choice == 3
  exit
else
  # Как только выбор сделан, мы можем создать запись нужного типа, передав выбор
  # пользователя в статический метод create класса Post, который мы фактически
  # используем как конструктор.
  entry = Post.create(choices[choice])

  # Сейчас в переменной entry лежит один из детей класса Post, какой именно,
  # определилось выбором пользователя, переменной choice. Но мы не знаем какой,
  # и обращаемся с entry как с объектом класса Post, этого оказывается достаточно
  # так как у любого наследника класса Post должны быть реализованы методы
  # read_from_console и save.

  # Просим пользователя ввести пост (каким бы он ни был)
  entry.read_from_console

  # Сохраняем пост в базу данных
  id = entry.save_to_db

  # Сообщаем пользователю о том, что его запись сохранена в файл.
  puts "Ваша запись сохранена c id = #{id}"
end
